# -*- coding: utf-8 -*-
"""Neo_data_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k9aPI1-INZvNbprOM_cjNYYN2w9r2Sq7
"""

from google.colab import files
uploades = files.upload()

import pandas as pd
df = pd.read_csv('neo_data.csv',parse_dates=['Close Approach Date', 'Close Approach Date (Full)'])
df['year'] = df['Close Approach Date'].dt.year

df.head()

import matplotlib.pyplot as plt
df['Close Approach Date (Full)'] = pd.to_datetime(df['Close Approach Date (Full)'])

# Plot a time series graph for close approach dates
plt.figure(figsize=(12, 6))
plt.plot(df['Close Approach Date (Full)'], df['Relative Velocity (km/s)'], label='Relative Velocity (km/s)')
plt.xlabel('Close Approach Date')
plt.ylabel('Relative Velocity (km/s)')
plt.title('Close Approach Trends of 433 Eros')
plt.legend()
plt.grid(True)
plt.show()

df['Close Approach Date (Full)'] = pd.to_datetime(df['Close Approach Date (Full)'])

# Create a scatter plot to explore the relationship between close approach dates and relative velocities
plt.figure(figsize=(12, 6))
plt.scatter(df['Close Approach Date (Full)'], df['Relative Velocity (km/s)'], alpha=0.5)
plt.xlabel('Close Approach Date')
plt.ylabel('Relative Velocity (km/s)')
plt.title('Scatter Plot: Close Approach Date vs. Relative Velocity')
plt.grid(True)
plt.show()

# Create a scatter plot to explore the relationship between close approach dates and miss distances (in km)
plt.figure(figsize=(12, 6))
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (km)'], alpha=0.5)
plt.xlabel('Close Approach Date')
plt.ylabel('Miss Distance (km)')
plt.title('Scatter Plot: Close Approach Date vs. Miss Distance (km)')
plt.grid(True)
plt.show()

# Create a scatter plot to explore the relationship between close approach dates and miss distances (in miles)
plt.figure(figsize=(12, 6))
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (miles)'], alpha=0.5)
plt.xlabel('Close Approach Date')
plt.ylabel('Miss Distance (miles)')
plt.title('Scatter Plot: Close Approach Date vs. Miss Distance (miles)')
plt.grid(True)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming your dataset is stored in a DataFrame called 'df'

# Create a KDE plot for Relative Velocities (km/s)
plt.figure(figsize=(12, 6))
sns.kdeplot(df['Relative Velocity (km/s)'], shade=True)
plt.xlabel('Relative Velocity (km/s)')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot: Relative Velocities')
plt.grid(True)
plt.show()

# Create a KDE plot for Miss Distances (km)
plt.figure(figsize=(12, 6))
sns.kdeplot(df['Miss Distance (km)'], shade=True)
plt.xlabel('Miss Distance (km)')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot: Miss Distances (km)')
plt.grid(True)
plt.show()

# Create a KDE plot for Miss Distances (miles)
plt.figure(figsize=(12, 6))
sns.kdeplot(df['Miss Distance (miles)'], shade=True)
plt.xlabel('Miss Distance (miles)')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot: Miss Distances (miles)')
plt.grid(True)
plt.show()



"""Relative Velocities Trends:

Create a time series graph or scatter plot to visualize how the relative velocities (in km/s, km/h, and miles/h) change during close approaches.
Use summary statistics to understand the average and variation in relative velocities over time.
"""

# Create time series graphs for relative velocities (km/s, km/h, and miles/h)
plt.figure(figsize=(12, 6))
plt.plot(df['Close Approach Date (Full)'], df['Relative Velocity (km/s)'], label='Relative Velocity (km/s)')
plt.plot(df['Close Approach Date (Full)'], df['Relative Velocity (km/h)'], label='Relative Velocity (km/h)')
plt.plot(df['Close Approach Date (Full)'], df['Relative Velocity (miles/h)'], label='Relative Velocity (miles/h)')
plt.xlabel('Close Approach Date')
plt.ylabel('Relative Velocity')
plt.title('Time Series: Relative Velocities Trends')
plt.legend()
plt.grid(True)
plt.show()

# Calculate summary statistics for relative velocities
average_km_s = df['Relative Velocity (km/s)'].mean()
average_km_h = df['Relative Velocity (km/h)'].mean()
average_miles_h = df['Relative Velocity (miles/h)'].mean()

std_dev_km_s = df['Relative Velocity (km/s)'].std()
std_dev_km_h = df['Relative Velocity (km/h)'].std()
std_dev_miles_h = df['Relative Velocity (miles/h)'].std()

print(f"Average Relative Velocity (km/s): {average_km_s}")
print(f"Average Relative Velocity (km/h): {average_km_h}")
print(f"Average Relative Velocity (miles/h): {average_miles_h}")
print(f"Standard Deviation Relative Velocity (km/s): {std_dev_km_s}")
print(f"Standard Deviation Relative Velocity (km/h): {std_dev_km_h}")
print(f"Standard Deviation Relative Velocity (miles/h): {std_dev_miles_h}")

import matplotlib.pyplot as plt
import pandas as pd



# Create scatter plots for each relative velocity unit (km/s, km/h, and miles/h)
plt.figure(figsize=(12, 6))

# Scatter plot for Relative Velocity (km/s)
plt.scatter(df['Close Approach Date (Full)'], df['Relative Velocity (km/s)'], alpha=0.5, label='Relative Velocity (km/s)')

# Scatter plot for Relative Velocity (km/h)
plt.scatter(df['Close Approach Date (Full)'], df['Relative Velocity (km/h)'], alpha=0.5, label='Relative Velocity (km/h)')

# Scatter plot for Relative Velocity (miles/h)
plt.scatter(df['Close Approach Date (Full)'], df['Relative Velocity (miles/h)'], alpha=0.5, label='Relative Velocity (miles/h)')

plt.xlabel('Close Approach Date')
plt.ylabel('Relative Velocity')
plt.title('Scatter Plot: Close Approach Date vs. Relative Velocities')
plt.legend()
plt.grid(True)
plt.show()

"""(We convert the 'Close Approach Date (Full)' column to a datetime format for proper plotting over time.

We create a scatter plot for each unit of measurement for relative velocities: km/s, km/h, and miles/h.

The alpha parameter is set to 0.5 for transparency to better visualize overlapping data points.

The legend and axis labels are added to make the plot more informative.

These scatter plots will help you visualize how the relative velocities change during close approaches over time. You can look for patterns, clusters, or trends in the data, and determine if there are any correlations between close approach dates and relative velocities in different units.)

Based on the average relative velocities and their standard deviations that  provided, there are several key findings and insights that can be derived:

Average Relative Velocities:

The average relative velocity of 433 Eros during close approaches is approximately:
17.86 km/s
64,292.50 km/h
39,948.86 miles/h
Variation in Relative Velocities:

The standard deviations for relative velocities in different units are:
8.36 km/s
30,103.40 km/h
18,705.08 miles/h
These standard deviations indicate the amount of variability or dispersion in the relative velocities. Higher standard deviations suggest more variability.
Range of Relative Velocities:

The standard deviations are quite significant relative to the averages, indicating that relative velocities during close approaches can vary considerably.
The wide range of relative velocities suggests that 433 Eros has experienced both fast and slow relative motions during its close approaches to Earth.
Conversion Factors:

The provided average relative velocities in different units can be used as conversion factors. For example, 1 km/s is approximately equivalent to 3,600 km/h and 2,236 miles/h. These conversion factors can be useful for understanding the velocities in different units.
Significance of Standard Deviations:

The relatively high standard deviations suggest that there is significant variation in the relative velocities during different close approach events. Further analysis might be needed to identify the factors contributing to this variation.
Safety Assessment:

The standard deviations can also be important for safety assessments, particularly when considering potentially hazardous objects. A higher standard deviation in relative velocities indicates a wider range of potential encounter speeds.
Overall, these findings and insights provide valuable information about the variability and characteristics of relative velocities for 433 Eros during its close approaches to Earth. Further analysis and consideration of these metrics can be important for understanding the potential risks and dynamics associated with NEOs like 433 Eros.
"""



"""Miss Distances Trends:

Similar to relative velocities, plot time series graphs or scatter plots for the miss distances (in astronomical units, lunar distances, km, and miles) during close approaches.
Calculate summary statistics to analyze the average and variability in miss distances over time.
"""

# Create time series graphs for miss distances (in astronomical units, lunar distances, km, and miles)
plt.figure(figsize=(12, 6))
plt.plot(df['Close Approach Date (Full)'], df['Miss Distance (astronomical)'], label='Miss Distance (AU)')
plt.plot(df['Close Approach Date (Full)'], df['Miss Distance (lunar)'], label='Miss Distance (lunar)')
plt.plot(df['Close Approach Date (Full)'], df['Miss Distance (km)'], label='Miss Distance (km)')
plt.plot(df['Close Approach Date (Full)'], df['Miss Distance (miles)'], label='Miss Distance (miles)')

plt.xlabel('Close Approach Date')
plt.ylabel('Miss Distance')
plt.title('Time Series: Miss Distances Trends')
plt.legend()
plt.grid(True)
plt.show()

# Calculate summary statistics for miss distances
average_au = df['Miss Distance (astronomical)'].mean()
average_ld = df['Miss Distance (lunar)'].mean()
average_km = df['Miss Distance (km)'].mean()
average_miles = df['Miss Distance (miles)'].mean()

std_dev_au = df['Miss Distance (astronomical)'].std()
std_dev_ld = df['Miss Distance (lunar)'].std()
std_dev_km = df['Miss Distance (km)'].std()
std_dev_miles = df['Miss Distance (miles)'].std()

print(f"Average Miss Distance (AU): {average_au}")
print(f"Average Miss Distance (lunar): {average_ld}")
print(f"Average Miss Distance (km): {average_km}")
print(f"Average Miss Distance (miles): {average_miles}")
print(f"Standard Deviation Miss Distance (AU): {std_dev_au}")
print(f"Standard Deviation Miss Distance (lunar): {std_dev_ld}")
print(f"Standard Deviation Miss Distance (km): {std_dev_km}")
print(f"Standard Deviation Miss Distance (miles): {std_dev_miles}")

"""In this code:

We convert the 'Close Approach Date (Full)' column to a datetime format for proper plotting over time.

We create scatter plots for each unit of measurement for miss distances: astronomical units (AU), lunar distances, kilometers (km), and miles.

The alpha parameter is set to 0.5 for transparency to better visualize overlapping data points.

The legend and axis labels are added to make the plot more informative.

These scatter plots will help you visualize how miss distances change during close approaches over time and can help identify any correlations or patterns between close approach dates and miss distances in different units.
"""

# Create scatter plots for miss distances (in astronomical units, lunar distances, km, and miles)
plt.figure(figsize=(12, 6))

# Scatter plot for Miss Distance (AU)
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (astronomical)'], alpha=0.5, label='Miss Distance (AU)')

# Scatter plot for Miss Distance (lunar)
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (lunar)'], alpha=0.5, label='Miss Distance (lunar)')

# Scatter plot for Miss Distance (km)
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (km)'], alpha=0.5, label='Miss Distance (km)')

# Scatter plot for Miss Distance (miles)
plt.scatter(df['Close Approach Date (Full)'], df['Miss Distance (miles)'], alpha=0.5, label='Miss Distance (miles)')

plt.xlabel('Close Approach Date')
plt.ylabel('Miss Distance')
plt.title('Scatter Plot: Close Approach Date vs. Miss Distances')
plt.legend()
plt.grid(True)
plt.show()

"""Based on the average miss distances and their standard deviations that you've provided, there are several key findings and insights that can be derived:

Average Miss Distances:

The average miss distances during close approaches of 433 Eros are approximately:
0.32 astronomical units (AU)
125.70 lunar distances
48,339,771 kilometers (km)
30,036,941 miles
Variability in Miss Distances:

The standard deviations for miss distances in different units are relatively high, indicating significant variability in miss distances during close approaches.
Standard Deviation Miss Distance (AU): ~0.28 AU
Standard Deviation Miss Distance (lunar): ~110.40 lunar distances
Standard Deviation Miss Distance (km): ~42,458,343 km
Standard Deviation Miss Distance (miles): ~26,382,391 miles
Units of Measurement:

The wide range in standard deviations across different units (AU, lunar distances, km, and miles) highlights the importance of considering the appropriate unit for different analysis purposes.
Safety Considerations:

The variability in miss distances, along with the standard deviations, is essential for safety assessments and impact risk analysis. A higher standard deviation suggests a broader range of potential outcomes during close approaches.
Orbit Dynamics:

The variability in miss distances may be influenced by factors such as the shape of 433 Eros' orbit, Earth's position, and timing of close approaches.
Mitigation Planning:

Understanding the variability in miss distances is crucial for planning mitigation strategies for potentially hazardous objects like NEOs. It helps assess the potential risk posed by different close approaches.
Public Awareness:

Communicating the variability in miss distances in different units can aid in public awareness efforts related to NEOs, as it provides a sense of the potential impact of these objects.
Scientific Insights:

Studying the variability in miss distances can provide scientific insights into the complex dynamics of NEO orbits and their interactions with Earth's gravitational field.
Overall, these findings and insights emphasize the importance of considering the variability and range of miss distances during close approaches of 433 Eros. It highlights the need for thorough risk assessments and safety planning when dealing with Near-Earth Objects.
"""

df

from plotly.express import bar
bar(data_frame=df, x='Limited Name', color='Orbiting Body')

df

print(df.columns)

df

df.nunique()

from plotly.express import bar
bar(data_frame=df, x='Limited Name', color='Orbiting Body')

"""Most of the Near Earth Objects mostly or entirely orbit Earth."""

bar(data_frame=df, x='Limited Name', color='year')

"""Here we learn that some of our data is historical and some of it is forecast."""

from plotly.express import histogram
histogram(data_frame=df[df['year'] <2024].sort_values(by='Limited Name'), x='year', color='Limited Name', nbins=124).show()
histogram(data_frame=df[df['year'] <2024].sort_values(by='Limited Name'), x='year', color='Is Potentially Hazardous', nbins=124).show()

"""If we look at just the historical data relative to 2023, we see that we do not have observations of every object every year."""

from plotly.express import scatter
scatter(data_frame=df, x='Limited Name', y='year', color='Miss Distance (km)')

"""This chart breaks out our data by object, but because most of the miss distances are clustered the color doesn't tell us much."""

scatter(data_frame=df, x='Limited Name', y='year', color='Is Potentially Hazardous')

"""This is what we really want to know: according to the dataset only three of these objects are potentially hazardous"""

histogram(data_frame=df, x='Miss Distance (km)', color='Is Potentially Hazardous',)

"""Distance and danger are only somewhat correlated: all dangerous objects are close, but not all close objects are dangerous."""

histogram(data_frame=df, x='Relative Velocity (km/s)', color='Is Potentially Hazardous',)

"""Similarly relative velocity and danger are not especially correlated."""

scatter(data_frame=df, y='Relative Velocity (km/s)', x='Miss Distance (km)', hover_name='Limited Name', size='Min Diameter (km)', color='year',
       log_x=True)

If we plot distance, velocity, size, and time together we can sort of see orbits of specific objects in some cases.

scatter(data_frame=df, y='Relative Velocity (km/s)', x='Miss Distance (km)', hover_name='Limited Name', size='Min Diameter (km)',
        color='Is Potentially Hazardous', symbol='Orbiting Body', log_x=True)

"""We can color the same plot by danger rather than year; this looks kind of cool but I'm not sure it tells us anything."""

scatter(data_frame=df, x='year', y='Miss Distance (km)', hover_name='Limited Name', size='Min Diameter (km)',
        color='Is Potentially Hazardous', log_y=True)

"""Similarly we can plot year x distance and the nearest near-miss events stand out, sort of."""

# Calculate correlation coefficients
correlation_coefficients = df[['Close Approach Date (Full)', 'Relative Velocity (km/s)', 'Miss Distance (km)']].corr()

# Display the correlation coefficients
print("Correlation Coefficients:")
print(correlation_coefficients)

# Assuming your dataset is stored in a DataFrame called 'df'

# Select the columns of interest for correlation analysis
columns_of_interest = ['Close Approach Date', 'Relative Velocity (km/s)', 'Miss Distance (km)']

# Create a new DataFrame with only the selected columns
selected_data = df[columns_of_interest]

# Calculate the correlation matrix
correlation_matrix = selected_data.corr()

# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# You can also visualize the correlations using a heatmap
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()